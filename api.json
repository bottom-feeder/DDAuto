{
	"openapi": "3.0.1",
	"info": {
		"title": "DDAuto :: Dynamic DNS with AutoDNS",
		"description": "The routes of the dynamic DNS API",
		"license": {
			"name": "MIT",
			"url": "https://github.com/th-schwarz/DDAuto/blob/develop/LICENSE"
		},
		"version": "1.0"
	},
	"externalDocs": {
		"description": "DDAuto on Github",
		"url": "https://github.com/th-schwarz/DDAuto"
	},
	"servers": [
		{
			"url": "http://localhost:8080",
			"description": "Generated server url"
		}
	],
	"tags": [
		{
			"name": "main",
			"description": "The routes."
		}
	],
	"paths": {
		"/info/{host}": {
			"get": {
				"tags": [
					"main"
				],
				"summary": "Determine the IP settings of the 'host' and returns it as formatted plain text.",
				"operationId": "info",
				"parameters": [
					{
						"name": "host",
						"in": "path",
						"description": "The host, for which the IPs must be identified.",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Formatted plain text with the IP settings of the 'host'",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "If the zone info fails.",
						"content": {
							"text/plain": {
								"example": "Zone info failed."
							}
						}
					},
					"404": {
						"description": "If the 'host' isn't configured.",
						"content": {
							"text/plain": {
								"example": "Host not found."
							}
						}
					}
				}
			}
		},
		"/exist/{host}": {
			"get": {
				"tags": [
					"main"
				],
				"summary": "Checks, if the 'host' exists and is configured.",
				"operationId": "exist",
				"parameters": [
					{
						"name": "host",
						"in": "path",
						"description": "The desired host to check.",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"404": {
						"description": "Host doesn't exists.",
						"content": {
							"text/plain": {
								"example": "Host not found."
							}
						}
					},
					"200": {
						"description": "Host exists and is configured.",
						"content": {
							"text/plain": {
								"example": "Host found."
							}
						}
					}
				}
			}
		},
		"/meminfo": {
			"get": {
				"tags": [
					"main"
				],
				"summary": "Generates basic memory informations",
				"operationId": "getMemoryStatistics",
				"responses": {
					"200": {
						"description": "Textual information about the memory.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"/update/{host}": {
			"get": {
				"tags": [
					"main"
				],
				"summary": "Updates the desired IP addresses of the 'host', if the 'apitoken' belongs to the host. If both parameters for IP addresses aren't set, an attempt is made to fetch the remote IP.",
				"operationId": "update",
				"parameters": [
					{
						"name": "host",
						"in": "path",
						"description": "The host, for which the IPs must be updated.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "apitoken",
						"in": "query",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "ipv4",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "ipv6",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Updates the desired IP addresses of the 'host', if the 'apitoken' belongs to the host. If both parameters for IP addresses aren't set, an attempt is made to fetch the remote IP.",
						"content": {
							"text/plain": {
								"example": "Update successful."
							}
						}
					},
					"400": {
						"description": "If the 'apitoken' doesn't match the 'host', IP addresses aren't valid or the remote IP couldn't determine.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "If the zone update fails.",
						"content": {
							"text/plain": {
								"example": "Zone update failed."
							}
						}
					}
				}
			}
		}
	},
	"components": {
		
	}
}